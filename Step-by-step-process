Step1:

Fork the repository:

https://github.com/Sonal0409/Vodafone-DevOps-CapstoneProject.git

The above repository contains source code and test cases of a spring boot project
==========================================================================

Step 2: We will write github actions workflow YAML file to Build the code using Maven

Execute below  steps:

 > In the repository -> click on Actions Tab --> Choose a Workflow --> Setup and workflow yourself

 > A new Yaml file will open--> give name as ContinousIntegration.yml

 > Add the below YAML code


name: Capstone project CICD pipeline
on: 
 push:
jobs:
 capstoneproject:
 runs-on: ubuntu-latest
 steps:
  - name: Checkout the code
    uses: actions/checkout@v4
  - name: Install Java and Maven
    uses: actions/setup-java@v4
    with:
    distribution: 'temurin'
    java-version: '11'
    cache: maven
  - name: Build the code
    run: mvn package --file pom.xml

Step 3: We will now create a dockerfile and then build image using github actions. 
        We will also push the image to dockerhub using github Actions

Execute below  steps:

 > In the repository create a new file with name as Dockerfile

Add the below lines in the dockerfile and save the file


FROM tomcat:8
COPY target/java-example.war /usr/local/tomcat/webapps/ROOT.war
EXPOSE 8080
CMD ["catalina.sh", "run"]


Save the file

> As we have to push the image to dockerhub, we will create secrets in the repository to save dockerhub username and dockerhub password

> For this go to Settings tab of repository > go to secrets and variables > click on to Actions > Secrets Tab > Repository secrets > click on new repository secret

	> give name as DOCKERHUB_USERNAME ==> Secret as > your dockerhub username > Click on Add secret

	> Again  click on new repository secret > give name as DOCKERHUB_TOKEN > Secret as > your dockerhub password> click on add secret

	> Give the secret names in UPPERCASE, as we use the same secret name in the actions YAML file.


> In the repository > now go to .github/workflow folder --> you will find the main.yml file

> Click on Edit the file 

> Replace the content of the file with below content. 

name: Capstone project CICD pipeline
on: 
 push:
jobs:
 capstoneproject:
  runs-on: ubuntu-latest
  steps:
  - name: Checkout the code
    uses: actions/checkout@v4
  - name: Install Java and Maven
    uses: actions/setup-java@v4
    with:
     distribution: 'temurin'
     java-version: '11'
     cache: maven
  - name: Build the code
    run: mvn package --file pom.xml
  - name: Install docker
    uses: docker/setup-buildx-action@v3
  - name: Login to dockerhub
    uses: docker/login-action@v2
    with:
     username: ${{ secrets.DOCKERHUB_USERNAME }}
     password: ${{ secrets.DOCKERHUB_TOKEN }}
  - name: Build and Push the Image
    uses: docker/build-push-action@v4
    with:
     context: .
     push: true 
     tags: ${{ secrets.DOCKERHUB_USERNAME }}/capstoneimage:latest


Step 4: Create kubernetes Helm chart to deploy above image and push charts to github repo

> Connect to devOps lab > here we will install helm 

Execute below commands:
# sudo su -
# curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get-helm-3 > get_helm.sh
# chmod 700 get_helm.sh
# ./get_helm.sh

> clone your own github repo in which we have to push the charts

# git clone https://github.com/Sonal0409/Vodafone-DevOps-CapstoneProject.git
# ls
# cd Vodafone-DevOps-CapstoneProject

> Now we have to create a new Helm chart using which we are going to deploy our Custom Docker image. Follow below commands to create a new helm Chart

# helm create webapp
# ls -al webapp

> By default, you will get a lot of files inside this helm chart but we are going to delete those so that we donâ€™t see error while deploying these.

# cd webapp/
# pwd
# cd templates/
# ls -al
# rm -rf *.yaml NOTES.txt tests ../values.yaml 
# ls -la

Create Deployment and service YAMls

# vim deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
 name: capstone
spec:
 replicas: 3
 selector:
  matchLabels:
   app: capstone
 template:
  metadata:
   labels:
    app: capstone
  spec:
  containers:
   name: c1
   image: sonal04/capstoneimage

Save the file

# vim service.yaml

apiVersion: v1
kind: Service
metadata:
 name: mysvc
spec:
 type: NodePort
 ports:
  - targetPort: 8080
    port: 8080
 selector:
  app: capstone

Save the file

come out of templates and webapp folder

> cd ../..

> you will be in the repo folder

Execute git commands to commit the webapp folder and push to github

# git add .
# git commit -m "done helm"
# git push origin master
username: give you  personal access token
password: press enter key

[ to create personal acess token on github go to page  https://github.com/settings/tokens and create the token]

Step 5: Install terraform on the Lab

Goto lab and execute below steps:

wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install terraform






